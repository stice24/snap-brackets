// -----JS CODE-----
//set inputs for SceneObjects, as well as head trakcer for tilts
//@input SceneObject PORTUGAL_R1
//@input SceneObject PORTUGAL_R2
//@input SceneObject PORTUGAL_R3
//@input SceneObject PORTUGAL_R4
//@input SceneObject PORTUGAL_ICON_L
//@input SceneObject PORTUGAL_ICON_R
//@input SceneObject ITALY_R1
//@input SceneObject ITALY_R2
//@input SceneObject ITALY_R3
//@input SceneObject ITALY_R4
//@input SceneObject ITALY_ICON_L
//@input SceneObject ITALY_ICON_R
//@input SceneObject DENMARK_R1
//@input SceneObject DENMARK_R2
//@input SceneObject DENMARK_R3
//@input SceneObject DENMARK_R4
//@input SceneObject DENMARK_ICON_L
//@input SceneObject DENMARK_ICON_R
//@input SceneObject BELGIUM_R1
//@input SceneObject BELGIUM_R2
//@input SceneObject BELGIUM_R3
//@input SceneObject BELGIUM_R4
//@input SceneObject BELGIUM_ICON_L
//@input SceneObject BELGIUM_ICON_R
//@input SceneObject FRANCE_R1
//@input SceneObject FRANCE_R2
//@input SceneObject FRANCE_R3
//@input SceneObject FRANCE_R4
//@input SceneObject FRANCE_ICON_L
//@input SceneObject FRANCE_ICON_R
//@input SceneObject CZECHIA_R1
//@input SceneObject CZECHIA_R2
//@input SceneObject CZECHIA_R3
//@input SceneObject CZECHIA_R4
//@input SceneObject CZECHIA_ICON_L
//@input SceneObject CZECHIA_ICON_R
//@input SceneObject ENGLAND_R1
//@input SceneObject ENGLAND_R2
//@input SceneObject ENGLAND_R3
//@input SceneObject ENGLAND_R4
//@input SceneObject ENGLAND_ICON_L
//@input SceneObject ENGLAND_ICON_R
//@input SceneObject SPAIN_R1
//@input SceneObject SPAIN_R2
//@input SceneObject SPAIN_R3
//@input SceneObject SPAIN_R4
//@input SceneObject SPAIN_ICON_L
//@input SceneObject SPAIN_ICON_R
//@input SceneObject HUNGARY_R1
//@input SceneObject HUNGARY_R2
//@input SceneObject HUNGARY_R3
//@input SceneObject HUNGARY_R4
//@input SceneObject HUNGARY_ICON_L
//@input SceneObject HUNGARY_ICON_R
//@input SceneObject SWITZERLAND_R1
//@input SceneObject SWITZERLAND_R2
//@input SceneObject SWITZERLAND_R3
//@input SceneObject SWITZERLAND_R4
//@input SceneObject SWITZERLAND_ICON_L
//@input SceneObject SWITZERLAND_ICON_R
//@input SceneObject UKRAINE_R1
//@input SceneObject UKRAINE_R2
//@input SceneObject UKRAINE_R3
//@input SceneObject UKRAINE_R4
//@input SceneObject UKRAINE_ICON_L
//@input SceneObject UKRAINE_ICON_R
//@input SceneObject GERMANY_R1
//@input SceneObject GERMANY_R2
//@input SceneObject GERMANY_R3
//@input SceneObject GERMANY_R4
//@input SceneObject GERMANY_ICON_L
//@input SceneObject GERMANY_ICON_R
//@input SceneObject CROATIA_R1
//@input SceneObject CROATIA_R2
//@input SceneObject CROATIA_R3
//@input SceneObject CROATIA_R4
//@input SceneObject CROATIA_ICON_L
//@input SceneObject CROATIA_ICON_R
//@input SceneObject NETHERLANDS_R1
//@input SceneObject NETHERLANDS_R2
//@input SceneObject NETHERLANDS_R3
//@input SceneObject NETHERLANDS_R4
//@input SceneObject NETHERLANDS_ICON_L
//@input SceneObject NETHERLANDS_ICON_R
//@input SceneObject TURKEY_R1
//@input SceneObject TURKEY_R2
//@input SceneObject TURKEY_R3
//@input SceneObject TURKEY_R4
//@input SceneObject TURKEY_ICON_L
//@input SceneObject TURKEY_ICON_R
//@input SceneObject POLAND_R1
//@input SceneObject POLAND_R2
//@input SceneObject POLAND_R3
//@input SceneObject POLAND_R4
//@input SceneObject POLAND_ICON_L
//@input SceneObject POLAND_ICON_R


//@input Component.Head headComponent
var tiltThreshold = 0.2; // Sensitivity threshold for detecting head tilts
var debounceTime = 1000; // Milliseconds to debounce head tilts
var lastTiltTime = Date.now(); // To track the last head tilt action


var teams = [
    "PORTUGAL", "FRANCE", "SPAIN", "HUNGARY", "GERMANY", "CROATIA", "POLAND", "BELGIUM",
    "CZECHIA", "ENGLAND", "SWITZERLAND", "UKRAINE", "NETHERLANDS", "TURKEY", "DENMARK", "ITALY"
];

var teamObjects = {};
teams.forEach(team => {
    teamObjects[team] = {
        rounds: [script[team + "_R1"], script[team + "_R2"], script[team + "_R3"], script[team + "_R4"]],
        iconL: script[team + "_ICON_L"],
        iconR: script[team + "_ICON_R"] // setting teams via icon naming conventions
    };
    // Initially disable all icons
    teamObjects[team].iconL.enabled = false;
    teamObjects[team].iconR.enabled = false;
    teamObjects[team].rounds.forEach(round => round.enabled = false);
});

var initialMatchups = [
    [["PORTUGAL", "FRANCE"], ["SPAIN", "HUNGARY"], ["GERMANY", "CROATIA"], ["POLAND", "BELGIUM"], ["CZECHIA", "ENGLAND"], ["SWITZERLAND", "UKRAINE"], ["NETHERLANDS", "TURKEY"], ["DENMARK", "ITALY"]],
    // Subsequent rounds are dynamically populated
    [], [], []
];
var winners = [[], [], [], []];
var currentRound = 0;
var currentMatchIndex = 0;

// Enable icons for the first match of the tournament
teamObjects[initialMatchups[0][0][0]].iconL.enabled = true;
teamObjects[initialMatchups[0][0][1]].iconR.enabled = true;

//progress this round's winner to the next round
function enableNextRoundObject(team) {
    var teamData = teamObjects[team];
    for (var i = 0; i < teamData.rounds.length; i++) {
        if (!teamData.rounds[i].enabled) {
            teamData.rounds[i].enabled = true;
            break;
        }
    }
    if (currentMatchIndex < initialMatchups[currentRound].length) {
        var nextMatchup = initialMatchups[currentRound][currentMatchIndex];
        teamObjects[nextMatchup[0]].iconL.enabled = true;
        teamObjects[nextMatchup[1]].iconR.enabled = true;
    }
}

//backend winner updates in array
function updateMatchWinner(winnerTeam) {
    enableNextRoundObject(winnerTeam);
    winners[currentRound].push(winnerTeam);
    currentMatchIndex++;
    if (currentMatchIndex >= initialMatchups[currentRound].length) {
        prepareNextRound();
    } else {
        var nextMatchup = initialMatchups[currentRound][currentMatchIndex];
        teamObjects[nextMatchup[0]].iconL.enabled = true;
        teamObjects[nextMatchup[1]].iconR.enabled = true;
    }
}

//set up both arrays and visuals for moving to the next competition round
function prepareNextRound() {
    currentRound++;
    currentMatchIndex = 0;

    if (currentRound == 1) {
        // Setup matchups for Round 1 (R1)
        for (var i = 0; i < winners[0].length; i += 2) {
            initialMatchups[1].push([winners[0][i], winners[0][i + 1]]);
        }
    } else if (currentRound == 2) {
        // Setup matchups for Round 2 (R2)
        for (var i = 0; i < winners[1].length; i += 2) {
            initialMatchups[2].push([winners[1][i], winners[1][i + 1]]);
        }
    } else if (currentRound == 3) {
        // Setup the final matchup for Round 3 (R3)
        initialMatchups[3].push([winners[2][0], winners[2][1]]);
    } else {
        return;
        // Tournament completion logic
        print("Tournament Complete. Winner:", winners[3][0]);
    }

    // Enable icons for the first matchup of the new round
    if (initialMatchups[currentRound][0]) {
        var nextMatchup = initialMatchups[currentRound][0];
        if (teamObjects[nextMatchup[0]].iconL) teamObjects[nextMatchup[0]].iconL.enabled = true;
        if (teamObjects[nextMatchup[1]].iconR) teamObjects[nextMatchup[1]].iconR.enabled = true;
    }
}

//head tilt logic...note: added buffer to make it easier on user
function checkForHeadTilt() {
    var currentTime = Date.now();
    if (currentTime - lastTiltTime < debounceTime) return;
    lastTiltTime = currentTime;

    var headTransform = script.headComponent.getTransform();
    var tiltDirection = headTransform.up.x;

    if (initialMatchups[currentRound] && initialMatchups[currentRound].length > currentMatchIndex) {
        var currentMatchup = initialMatchups[currentRound][currentMatchIndex];

        if (tiltDirection > tiltThreshold) {
            updateMatchWinner(currentMatchup[1]);
            teamObjects[currentMatchup[0]].iconL.enabled = false;
            teamObjects[currentMatchup[1]].iconR.enabled = false;
        } else if (tiltDirection < -tiltThreshold) {
            updateMatchWinner(currentMatchup[0]);
            teamObjects[currentMatchup[0]].iconL.enabled = false;
            teamObjects[currentMatchup[1]].iconR.enabled = false;
        }
    }
}

// bind the head tilt check to the UpdateEvent
script.createEvent("UpdateEvent").bind(checkForHeadTilt);
